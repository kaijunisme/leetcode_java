package com.example.leetcode.explore.hashtable;

public class ValidSudoku {

    public static void main(String[] args) {
        var validSudoku = new ValidSudoku();
        // char[][] board = new char[][] 
        //     {{'5','3','.','.','7','.','.','.','.'}
        //     ,{'6','.','.','1','9','5','.','.','.'}
        //     ,{'.','9','8','.','.','.','.','6','.'}
        //     ,{'8','.','.','.','6','.','.','.','3'}
        //     ,{'4','.','.','8','.','3','.','.','1'}
        //     ,{'7','.','.','.','2','.','.','.','6'}
        //     ,{'.','6','.','.','.','.','2','8','.'}
        //     ,{'.','.','.','4','1','9','.','.','5'}
        //     ,{'.','.','.','.','8','.','.','7','9'}}
        //     ;
        // char[][] board = new char[][] 
        //     {{'8','3','.','.','7','.','.','.','.'}
        //     ,{'6','.','.','1','9','5','.','.','.'}
        //     ,{'.','9','8','.','.','.','.','6','.'}
        //     ,{'8','.','.','.','6','.','.','.','3'}
        //     ,{'4','.','.','8','.','3','.','.','1'}
        //     ,{'7','.','.','.','2','.','.','.','6'}
        //     ,{'.','6','.','.','.','.','2','8','.'}
        //     ,{'.','.','.','4','1','9','.','.','5'}
        //     ,{'.','.','.','.','8','.','.','7','9'}}
        //     ;
        // char[][] board = new char[][] 
        //     {{'8','3','.','.','7','.','.','.','.'}
        //     ,{'6','.','.','1','9','5','.','.','.'}
        //     ,{'.','9','8','.','.','.','.','6','.'}
        //     ,{'1','.','.','.','6','.','.','.','3'}
        //     ,{'4','.','.','8','.','3','.','.','1'}
        //     ,{'7','.','.','.','2','.','.','.','6'}
        //     ,{'.','6','.','.','.','.','2','8','.'}
        //     ,{'.','.','.','4','1','9','.','.','5'}
        //     ,{'.','.','.','.','8','.','.','7','9'}}
        //     ;
        char[][] board = new char[][] 
            {{'.','.','.','.','.','.','.','.','.'}
            ,{'.','.','.','3','.','.','5','.','.'}
            ,{'.','.','.','.','.','.','.','.','.'}
            ,{'.','.','.','8','.','.','.','.','.'}
            ,{'.','.','.','.','1','1','6','.','.'}
            ,{'.','.','.','.','.','.','.','.','.'}
            ,{'.','.','.','.','.','.','1','.','.'}
            ,{'.','.','.','.','.','.','.','.','7'}
            ,{'.','.','.','.','.','.','.','4','.'}};
        boolean result = validSudoku.isValidSudoku(board);
        System.out.println("Result: " + result);
    }

    public boolean isValidSudoku(char[][] board) {
        // 1~9 rows, 10~18 columns, 19~21 sub-boxes
        boolean[][] temp = new boolean[21][9];
        
        int i = 0, j, value;
        for (; i < 9; i++) {
            for (j = 0; j < 9; j++) {
                value = this.convertToInt(board[i][j]);
                if (0 == value) continue;
                
                value--;
                
                // rows
                if (temp[i][value]) {
                    return false;
                }
                temp[i][value] = true;

                // columns
                if (temp[j + 9][value]) {
                    return false;
                }
                temp[j + 9][value] = true;

                // sub-boxes
                if (temp[(j / 3) + 18][value]) {
                    return false;
                }
                temp[(j / 3) + 18][value] = true;
            }
            if (i == 2 || i == 5) {
                temp[18] = new boolean[9];
                temp[19] = new boolean[9];
                temp[20] = new boolean[9];
            }
        }

        return true;
    }

    private int convertToInt(char c) {
        if (Character.isDigit(c)) {
            return Character.getNumericValue(c);
        }
        return 0;
    }

}
